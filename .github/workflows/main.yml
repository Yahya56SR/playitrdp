name: YouTube Proxy Viewer (Windows with RDP Debugging)

on:
  workflow_dispatch:
    inputs:
      video_url:
        description: 'YouTube Video URL'
        required: true
        default: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ'
      watch_time:
        description: 'Watch time in seconds'
        required: false
        default: '60'
      max_instances:
        description: 'Maximum browser instances'
        required: false
        default: '5'
      enable_debug:
        description: 'Enable RDP debugging session'
        required: false
        default: 'false'

env:
  PYTHON_VERSION: '3.10'
  WORKING_DIR: 'youtube_proxy_viewer'
  CHROMEDRIVER_VERSION: '114.0.5735.90'

jobs:
  setup:
    runs-on: windows-latest
    name: Setup environment
    outputs:
      working_proxies_count: ${{ steps.filter-proxies.outputs.working_proxies_count }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install selenium requests
        
    - name: Install ChromeDriver
      run: |
        $version = "$env:CHROMEDRIVER_VERSION"
        $url = "https://chromedriver.storage.googleapis.com/$version/chromedriver_win32.zip"
        Invoke-WebRequest -Uri $url -OutFile chromedriver_win32.zip
        Expand-Archive -Path chromedriver_win32.zip -DestinationPath .
        New-Item -ItemType Directory -Path "C:\chromedriver" -Force
        Move-Item -Path chromedriver.exe -Destination "C:\chromedriver\chromedriver.exe"
        $env:PATH = "C:\chromedriver;" + $env:PATH
        [System.Environment]::SetEnvironmentVariable("PATH", $env:PATH, "Machine")
        chromedriver --version
      shell: powershell
        
    - name: Copy raw proxies
      run: |
        New-Item -ItemType Directory -Path $env:WORKING_DIR -Force
        Copy-Item raw_proxies.txt $env:WORKING_DIR/raw_proxies.txt
      shell: powershell
        
    - name: Filter working proxies
      id: filter-proxies
      run: |
        cd $env:WORKING_DIR
        python ../proxy_checker.py raw_proxies.txt `
          --threads 10 `
          --timeout 5 `
          --output working_proxies.txt
        
        $maxInstances = [int]${{ github.event.inputs.max_instances }}
        if (Test-Path working_proxies.txt) {
          $proxies = Get-Content working_proxies.txt
          $proxies | Select-Object -First $maxInstances | Set-Content limited_proxies.txt
          Move-Item -Path limited_proxies.txt -Destination working_proxies.txt -Force
          $count = (Get-Content working_proxies.txt | Measure-Object -Line).Lines
        } else {
          $count = 0
        }
        echo "working_proxies_count=$count" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        echo "Working proxies: $count"
      shell: powershell
        
    - name: Upload working proxies
      if: ${{ steps.filter-proxies.outputs.working_proxies_count > 0 }}
      uses: actions/upload-artifact@v4
      with:
        name: working-proxies
        path: ${{ env.WORKING_DIR }}/working_proxies.txt

  run-viewer:
    needs: setup
    runs-on: windows-latest
    name: Run YouTube Viewer
    if: ${{ needs.setup.outputs.working_proxies_count > 0 }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install selenium
        
    - name: Download working proxies
      uses: actions/download-artifact@v4
      with:
        name: working-proxies
        path: ${{ env.WORKING_DIR }}
        
    - name: Configure RDP for debugging
      if: ${{ github.event.inputs.enable_debug == 'true' }}
      env:
        RDP_PASSWORD: ${{ secrets.RDP_PASSWORD || 'Passw0rd!' }}
      run: |
        # Enable RDP and configure firewall
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        
        # Set password for runneradmin account
        $securePass = ConvertTo-SecureString $env:RDP_PASSWORD -AsPlainText -Force
        Set-LocalUser -Name "runneradmin" -Password $securePass
        
        # Mask password in logs
        Write-Output "::add-mask::$env:RDP_PASSWORD"
        Write-Output "RDP configured. Connect using runneradmin and the password set in secrets.RDP_PASSWORD"
      shell: powershell
        
    - name: Set up Playit tunnel
      if: ${{ github.event.inputs.enable_debug == 'true' }}
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }}
      run: |
        # Download and install Playit
        Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe"
        
        # Start Playit tunnel for RDP (port 3389)
        Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -NoNewWindow
        Start-Sleep -Seconds 10
        Write-Output "Playit tunnel started for RDP access"
      shell: powershell
        
    - name: Run YouTube viewer
      run: |
        cd $env:WORKING_DIR
        if ("${{ github.event.inputs.enable_debug }}" -eq "true") {
          $headlessArg = ""
        } else {
          $headlessArg = "--headless"
        }
        python ../youtube_viewer.py working_proxies.txt `
          "${{ github.event.inputs.video_url }}" `
          --watch-time ${{ github.event.inputs.watch_time }} `
          --profiles-dir chrome_profiles `
          $headlessArg
      shell: powershell
        
    - name: Upload profiles
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: chrome-profiles
        path: ${{ env.WORKING_DIR }}/chrome_profiles
        retention-days: 1

    - name: Keep alive for debugging
      if: ${{ github.event.inputs.enable_debug == 'true' }}
      run: |
        Write-Output "Keeping runner alive for 6 hours for debugging..."
        Start-Sleep -Seconds 21600
      shell: powershell

  cleanup:
    needs: [setup, run-viewer]
    runs-on: windows-latest
    name: Cleanup
    if: always()
    
    steps:
    - name: Cleanup workflow
      run: Write-Output "Workflow completed"
      shell: powershell
